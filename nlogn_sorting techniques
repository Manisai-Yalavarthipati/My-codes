#include <stdio.h>
#include <stdlib.h>
void display(int *a, int n)
{
    int i;
    for (i = 0; i < n; i++)
        printf("%d ", a[i]);
}
// ! Heap sort starts
void max_heap(int *a, int n, int i)
{
    int large = i, L = 2 * i + 1, R = 2 * i + 2;
    if (L < n)
        if (a[large] < a[L])
            large = L;
    if (R < n)
        if (a[large] < a[R])
            large = R;
    if (large != i)
    {
        a[i] = a[i] + a[large] - (a[large] = a[i]);
        max_heap(a, n, large);
    }
}
void heap_sort(int *a, int n)
{
    int i;
    for (i = ((n / 2) - 1); i >= 0; i--)
        max_heap(a, n, i);
    for (i = n - 1; i >= 0; i--)
    {
        a[0] = a[0] + a[i] - (a[i] = a[0]);
        max_heap(a, i, 0);
    }
}
// ! Heap sort ends
// ! Merge sort starts
void merge(int *a, int l, int m, int r)
{
    /* time complexity - O(n*logn)
     - while dividing array into equal halfs is logn
     - n is for comparing the two divided halfs
     - there will be n comparisions in logn'th step
     - so , total time complexity is O(n*logn) , space compexity is O(n)
     - this sorting technique is fast and not good for larger arrays due to space complexity */
    int *L, *R, i, j, k = l;
    L = (int *)malloc(sizeof(int) * (m - l + 1));
    R = (int *)malloc(sizeof(int) * (r - m));
    for (i = 0; i < (m - l + 1); i++)
        L[i] = a[l + i];
    for (i = 0; i < (r - m); i++)
        R[i] = a[m + 1 + i];
    i = j = 0;
    while (i < (m - l + 1) && j < (r - m))
    { // placing smallest element in the array
        if (L[i] < R[j])
        {
            a[k] = L[i];
            k++;
            i++;
        }
        else
        {
            a[k] = R[j];
            k++;
            j++;
        }
    }
    while (i < (m - l + 1))
    {
        a[k] = L[i];
        k++;
        i++;
    }
    while (j < (r - m))
    {
        a[k] = R[j];
        k++;
        j++;
    }
    free(L);
    free(R);
}
void merge_sort(int *a, int l, int r)
{
    if (l < r) // if l ==r it is the single element no need to divide
    {
        int mid = (l + r) / 2;
        merge_sort(a, l, mid); // divide
        merge_sort(a, mid + 1, r);
        merge(a, l, mid, r); // merge
    }
}
// ! merge sort ends
// ! Quick sort starts
int partition(int *a, int l, int r)
{
    int p = r;
    while (l != r)
    {
        if (p == l)
        {
            if (a[p] > a[r])
            {
                a[r] = a[r] + a[p] - (a[p] = a[r]);
                p = r;
            }
            else
                r--;
        }
        else
        {
            if (a[l] > a[p])
            {
                a[l] = a[l] + a[p] - (a[p] = a[l]);
                p = l;
            }
            else
                l++;
        }
    }
    return p;
}
void quick_sort(int *a, int l, int r)
{
    if (l < r)
    {
        int p = partition(a, l, r);
        quick_sort(a, l, p - 1);
        quick_sort(a, p + 1, r);
    }
}
// ! Quick sort ends
int main()
{
    int n, n1, *a, i;
    do
    {
        printf("  1.Enter data\n");
        printf("  2.exit\n");
        printf("Enter choice : ");
        scanf("%d", &n);
        switch (n)
        {
        case 1:
            printf("Enter n : ");
            scanf("%d", &n1);
            a = (int *)malloc(sizeof(int) * n1);
            printf("Enter %d elements : ", n1);
            for (i = 0; i < n1; i++)
                scanf("%d", a + i);
            printf("\n");
            printf("  1.Heap Sort\n");
            printf("  2.Merge Sort\n");
            printf("  3.Quick sort\n");
            printf("Enter choice : ");
            scanf("%d", &n);
            printf("\n");
            switch (n)
            {
            case 1:
                heap_sort(a, n1);
                printf("Sorted array is : ");
                display(a, n1);
                break;
            case 2:
                merge_sort(a, 0, n1 - 1);
                printf("Sorted array is : ");
                display(a, n1);
                break;
            case 3:
                quick_sort(a, 0, n1 - 1);
                printf("Sorted array is : ");
                display(a, n1);
                break;
            default:
                printf("Enter displayed choices only\n");
                break;
            }
            free(a);
            printf("\n");
            break;
        case 2:
            exit(0);
        default:
            printf("Enter displayed choices only\n");
            break;
        }
        printf("\n");
    } while (1);
    return 0;
}
